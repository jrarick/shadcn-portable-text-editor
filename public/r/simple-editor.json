{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "simple-editor",
  "type": "registry:block",
  "title": "Simple Editor",
  "description": "A simple portable text editor.",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "@radix-ui/react-dialog",
    "lucide-react",
    "@radix-ui/react-label",
    "@radix-ui/react-popover",
    "@radix-ui/react-select",
    "@radix-ui/react-tooltip",
    "@portabletext/editor",
    "@portabletext/keyboard-shortcuts",
    "@portabletext/toolbar",
    "react-is",
    "zod"
  ],
  "registryDependencies": [
    "https://shadcn-portable-text-editor.vercel.app/r/portable-text-editor.json"
  ],
  "files": [
    {
      "path": "registry/default/blocks/simple-editor.tsx",
      "content": "\"use client\"\n\nimport {\n  DecoratorButton,\n  EditorContainer,\n  EditorProvider,\n  EditorTextEditable,\n  extendDecorator,\n  extendStyle,\n  renderDecorator,\n  renderStyle,\n  StyleDropdown,\n  Toolbar,\n} from \"@/registry/default/components/ui/portable-text-editor\"\nimport { defineSchema, type PortableTextBlock } from \"@portabletext/editor\"\nimport { EventListenerPlugin } from \"@portabletext/editor/plugins\"\nimport { useToolbarSchema } from \"@portabletext/toolbar\"\nimport React from \"react\"\n\nconst schemaDefinition = defineSchema({\n  decorators: [\n    { name: \"strong\", title: \"Bold\" },\n    { name: \"em\", title: \"Italic\" },\n    {\n      name: \"underline\",\n      title: \"Underline\",\n    },\n  ],\n  styles: [\n    { name: \"normal\", title: \"Paragraph\" },\n    { name: \"h1\", title: \"Heading 1\" },\n    { name: \"h2\", title: \"Heading 2\" },\n  ],\n  annotations: [],\n  lists: [],\n  inlineObjects: [],\n  blockObjects: [],\n})\n\nconst SimpleEditor = () => {\n  const [value, setValue] = React.useState<\n    Array<PortableTextBlock> | undefined\n  >(undefined)\n\n  return (\n    <EditorProvider\n      initialConfig={{\n        schemaDefinition,\n        initialValue: value,\n      }}\n    >\n      <EventListenerPlugin\n        on={(event) => {\n          if (event.type === \"mutation\") {\n            setValue(event.value)\n          }\n        }}\n      />\n      <EditorContainer>\n        <EditorToolbar />\n        <EditorTextEditable\n          renderStyle={renderStyle}\n          renderDecorator={renderDecorator}\n          renderBlock={(props) => <div>{props.children}</div>}\n          renderListItem={(props) => <>{props.children}</>}\n        />\n      </EditorContainer>\n    </EditorProvider>\n  )\n}\n\nconst EditorToolbar = () => {\n  const toolbarSchema = useToolbarSchema({\n    extendDecorator,\n    extendStyle,\n  })\n\n  return (\n    <Toolbar>\n      {toolbarSchema.decorators?.map((decorator) => (\n        <DecoratorButton\n          key={decorator.name}\n          schemaType={decorator}\n          showKeyboardShortcut={false}\n        />\n      ))}\n      {toolbarSchema.styles && (\n        <StyleDropdown\n          schemaTypes={toolbarSchema.styles}\n          showKeyboardShortcut={false}\n          triggerProps={{\n            className: \"w-56\",\n          }}\n        />\n      )}\n    </Toolbar>\n  )\n}\n\nexport default SimpleEditor\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/components/ui/portable-text-editor.tsx",
      "content": "import { cn } from \"@/lib/utils\"\nimport { Button } from \"@/registry/default/components/ui/button\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/registry/default/components/ui/dialog\"\nimport { Input } from \"@/registry/default/components/ui/input\"\nimport { Label } from \"@/registry/default/components/ui/label\"\nimport {\n  Popover,\n  PopoverAnchor,\n  PopoverContent,\n} from \"@/registry/default/components/ui/popover\"\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/registry/default/components/ui/select\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/registry/default/components/ui/tooltip\"\nimport {\n  type BlockAnnotationRenderProps,\n  type EditorProviderProps,\n  PortableTextEditable,\n  EditorProvider as PortableTextEditorProvider,\n  type RenderAnnotationFunction,\n  type RenderDecoratorFunction,\n  type RenderStyleFunction,\n} from \"@portabletext/editor\"\nimport {\n  blockquote,\n  bold,\n  createKeyboardShortcut,\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  italic,\n  type KeyboardShortcut,\n  link,\n  normal,\n  redo,\n  strikeThrough,\n  underline,\n  undo,\n} from \"@portabletext/keyboard-shortcuts\"\nimport {\n  type ExtendAnnotationSchemaType,\n  type ExtendDecoratorSchemaType,\n  type ExtendListSchemaType,\n  type ExtendStyleSchemaType,\n  type ToolbarAnnotationSchemaType,\n  type ToolbarBlockObjectSchemaType,\n  type ToolbarDecoratorSchemaType,\n  type ToolbarListSchemaType,\n  type ToolbarStyleSchemaType,\n  useAnnotationButton,\n  useAnnotationPopover,\n  useDecoratorButton,\n  useHistoryButtons,\n  useListButton,\n  useStyleSelector,\n  useToolbarSchema,\n} from \"@portabletext/toolbar\"\nimport {\n  AlignCenterIcon,\n  AlignJustifyIcon,\n  AlignLeftIcon,\n  AlignRightIcon,\n  ArrowBigUpIcon,\n  BoldIcon,\n  ChevronUpIcon,\n  Heading1Icon,\n  Heading2Icon,\n  Heading3Icon,\n  Heading4Icon,\n  Heading5Icon,\n  Heading6Icon,\n  ItalicIcon,\n  LinkIcon,\n  ListIcon,\n  ListOrderedIcon,\n  OptionIcon,\n  PencilIcon,\n  PilcrowIcon,\n  RedoIcon,\n  StrikethroughIcon,\n  SubscriptIcon,\n  SuperscriptIcon,\n  TextQuoteIcon,\n  TrashIcon,\n  UnderlineIcon,\n  UndoIcon,\n} from \"lucide-react\"\nimport React from \"react\"\nimport { isValidElementType } from \"react-is\"\nimport { z } from \"zod\"\n\nconst FormDataSchema = z.record(z.string(), z.unknown())\n\nexport const LinkAnnotationSchema = z.object({\n  schemaType: z.object({\n    name: z.literal(\"link\"),\n  }),\n  value: z.object({\n    href: z.string(),\n  }),\n})\n\nexport const left = createKeyboardShortcut({\n  default: [\n    {\n      key: \"L\",\n      alt: false,\n      ctrl: true,\n      meta: false,\n      shift: false,\n    },\n  ],\n  apple: [\n    {\n      key: \"L\",\n      alt: false,\n      ctrl: false,\n      meta: true,\n      shift: false,\n    },\n  ],\n})\n\nexport const center = createKeyboardShortcut({\n  default: [\n    {\n      key: \"E\",\n      alt: false,\n      ctrl: true,\n      meta: false,\n      shift: false,\n    },\n  ],\n  apple: [\n    {\n      key: \"E\",\n      alt: false,\n      ctrl: false,\n      meta: true,\n      shift: false,\n    },\n  ],\n})\n\nexport const right = createKeyboardShortcut({\n  default: [\n    {\n      key: \"R\",\n      alt: false,\n      ctrl: true,\n      meta: false,\n      shift: false,\n    },\n  ],\n  apple: [\n    {\n      key: \"R\",\n      alt: false,\n      ctrl: false,\n      meta: true,\n      shift: false,\n    },\n  ],\n})\n\nexport const justify = createKeyboardShortcut({\n  default: [\n    {\n      key: \"J\",\n      alt: false,\n      ctrl: true,\n      meta: false,\n      shift: false,\n    },\n  ],\n  apple: [\n    {\n      key: \"J\",\n      alt: false,\n      ctrl: false,\n      meta: true,\n      shift: false,\n    },\n  ],\n})\n\nexport const renderStyle: RenderStyleFunction = (props) => {\n  if (props.schemaType.value === \"h1\") {\n    return (\n      <h1 className=\"scroll-m-20 text-4xl font-extrabold tracking-tight lg:text-5xl\">\n        {props.children}\n      </h1>\n    )\n  }\n  if (props.schemaType.value === \"h2\") {\n    return (\n      <h2 className=\"scroll-m-2 text-3xl font-semibold tracking-tight first:mt-0\">\n        {props.children}\n      </h2>\n    )\n  }\n  if (props.schemaType.value === \"h3\") {\n    return (\n      <h3 className=\"scroll-m-20 text-2xl font-semibold tracking-tight\">\n        {props.children}\n      </h3>\n    )\n  }\n  if (props.schemaType.value === \"h4\") {\n    return (\n      <h4 className=\"scroll-m-20 text-xl font-semibold tracking-tight\">\n        {props.children}\n      </h4>\n    )\n  }\n  if (props.schemaType.value === \"h5\") {\n    return (\n      <h5 className=\"scroll-m-20 text-lg font-semibold tracking-tight\">\n        {props.children}\n      </h5>\n    )\n  }\n  if (props.schemaType.value === \"h6\") {\n    return (\n      <h6 className=\"scroll-m-20 text-base font-semibold tracking-tight\">\n        {props.children}\n      </h6>\n    )\n  }\n  if (props.schemaType.value === \"blockquote\") {\n    return (\n      <blockquote className=\"mt-6 border-l-2 pl-6 italic\">\n        {props.children}\n      </blockquote>\n    )\n  }\n  return <>{props.children}</>\n}\n\nexport const renderDecorator: RenderDecoratorFunction = (props) => {\n  if (props.value === \"strong\") {\n    return <strong>{props.children}</strong>\n  }\n  if (props.value === \"em\") {\n    return <em>{props.children}</em>\n  }\n  if (props.value === \"underline\") {\n    return <u>{props.children}</u>\n  }\n  if (props.value === \"strikethrough\") {\n    return <del className=\"line-through\">{props.children}</del>\n  }\n  if (props.value === \"subscript\") {\n    return <sub>{props.children}</sub>\n  }\n  if (props.value === \"superscript\") {\n    return <sup>{props.children}</sup>\n  }\n  if (props.value === \"left\") {\n    return <div className=\"text-left\">{props.children}</div>\n  }\n  if (props.value === \"center\") {\n    return <div className=\"text-center\">{props.children}</div>\n  }\n  if (props.value === \"right\") {\n    return <div className=\"text-right\">{props.children}</div>\n  }\n  if (props.value === \"justify\") {\n    return <div className=\"text-justify\">{props.children}</div>\n  }\n  return <>{props.children}</>\n}\n\nexport const renderAnnotation: RenderAnnotationFunction = (props) => {\n  if (LinkAnnotationSchema.safeParse(props).success) {\n    return <RenderedLink {...props} />\n  }\n\n  return props.children\n}\n\nexport const extendDecorator: ExtendDecoratorSchemaType = (decorator) => {\n  if (decorator.name === \"strong\") {\n    return {\n      ...decorator,\n      icon: BoldIcon,\n      shortcut: bold,\n    }\n  }\n\n  if (decorator.name === \"em\") {\n    return {\n      ...decorator,\n      icon: ItalicIcon,\n      shortcut: italic,\n    }\n  }\n\n  if (decorator.name === \"underline\") {\n    return {\n      ...decorator,\n      icon: UnderlineIcon,\n      shortcut: underline,\n    }\n  }\n\n  if (decorator.name === \"strikethrough\") {\n    return {\n      ...decorator,\n      icon: StrikethroughIcon,\n      shortcut: strikeThrough,\n    }\n  }\n\n  if (decorator.name === \"subscript\") {\n    return {\n      ...decorator,\n      icon: SubscriptIcon,\n      mutuallyExclusive: [\"superscript\"],\n    }\n  }\n\n  if (decorator.name === \"superscript\") {\n    return {\n      ...decorator,\n      icon: SuperscriptIcon,\n      mutuallyExclusive: [\"subscript\"],\n    }\n  }\n\n  if (decorator.name === \"left\") {\n    return {\n      ...decorator,\n      icon: AlignLeftIcon,\n      shortcut: left,\n      mutuallyExclusive: [\"center\", \"right\", \"justify\"],\n    }\n  }\n\n  if (decorator.name === \"center\") {\n    return {\n      ...decorator,\n      icon: AlignCenterIcon,\n      shortcut: center,\n      mutuallyExclusive: [\"left\", \"right\", \"justify\"],\n    }\n  }\n\n  if (decorator.name === \"right\") {\n    return {\n      ...decorator,\n      icon: AlignRightIcon,\n      shortcut: right,\n      mutuallyExclusive: [\"left\", \"center\", \"justify\"],\n    }\n  }\n\n  if (decorator.name === \"justify\") {\n    return {\n      ...decorator,\n      icon: AlignJustifyIcon,\n      shortcut: justify,\n      mutuallyExclusive: [\"left\", \"center\", \"right\"],\n    }\n  }\n\n  return decorator\n}\n\nexport const extendAnnotation: ExtendAnnotationSchemaType = (annotation) => {\n  if (annotation.name === \"link\") {\n    return {\n      ...annotation,\n      icon: LinkIcon,\n      defaultValues: {\n        name: \"\",\n        href: \"https://example.com\",\n      },\n      shortcut: link,\n    }\n  }\n\n  return annotation\n}\n\nexport const extendStyle: ExtendStyleSchemaType = (style) => {\n  if (style.name === \"normal\") {\n    return {\n      ...style,\n      icon: PilcrowIcon,\n      shortcut: normal,\n    }\n  }\n  if (style.name === \"h1\") {\n    return {\n      ...style,\n      icon: Heading1Icon,\n      shortcut: h1,\n    }\n  }\n\n  if (style.name === \"h2\") {\n    return {\n      ...style,\n      icon: Heading2Icon,\n      shortcut: h2,\n    }\n  }\n\n  if (style.name === \"h3\") {\n    return {\n      ...style,\n      icon: Heading3Icon,\n      shortcut: h3,\n    }\n  }\n\n  if (style.name === \"h4\") {\n    return {\n      ...style,\n      icon: Heading4Icon,\n      shortcut: h4,\n    }\n  }\n\n  if (style.name === \"h5\") {\n    return {\n      ...style,\n      icon: Heading5Icon,\n      shortcut: h5,\n    }\n  }\n\n  if (style.name === \"h6\") {\n    return {\n      ...style,\n      icon: Heading6Icon,\n      shortcut: h6,\n    }\n  }\n\n  if (style.name === \"blockquote\") {\n    return {\n      ...style,\n      icon: TextQuoteIcon,\n      shortcut: blockquote,\n    }\n  }\n\n  return style\n}\n\nexport const extendList: ExtendListSchemaType = (list) => {\n  if (list.name === \"bullet\") {\n    return {\n      ...list,\n      icon: ListIcon,\n    }\n  }\n\n  if (list.name === \"number\") {\n    return {\n      ...list,\n      icon: ListOrderedIcon,\n    }\n  }\n\n  return list\n}\n\nexport const RenderedLink = (props: BlockAnnotationRenderProps) => {\n  const toolbarSchema = useToolbarSchema({\n    extendAnnotation,\n  })\n  const annotationPopover = useAnnotationPopover({\n    schemaTypes: toolbarSchema.annotations ?? [],\n  })\n  const [dialogOpen, setDialogOpen] = React.useState(false)\n\n  const linkData = LinkAnnotationSchema.safeParse(props)\n  const href = linkData.success ? linkData.data.value.href : undefined\n\n  if (\n    annotationPopover.snapshot.matches(\"disabled\") ||\n    annotationPopover.snapshot.matches({ enabled: \"inactive\" })\n  ) {\n    return <span className=\"text-blue-800 underline\">{props.children}</span>\n  }\n\n  return (\n    <Popover open={true}>\n      <PopoverAnchor className=\"inline w-min\">\n        <span className=\"text-blue-800 underline\">{props.children}</span>\n      </PopoverAnchor>\n      {annotationPopover.snapshot.context.annotations\n        .filter((annotation) => annotation.value._key === props.value._key)\n        .map((annotation) => (\n          <PopoverContent\n            key={annotation.value._key}\n            className=\"grid grid-cols-[1fr_auto_auto] gap-2 px-3 py-2\"\n          >\n            <p className=\"inline-flex items-center text-sm wrap-anywhere\">\n              {href}\n            </p>\n            <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n              <ToolbarTooltip tooltipContent=\"Edit link\">\n                <DialogTrigger asChild>\n                  <Button variant=\"outline\" size=\"icon\">\n                    <PencilIcon />\n                  </Button>\n                </DialogTrigger>\n              </ToolbarTooltip>\n              <DialogContent>\n                <DialogHeader className=\"pb-4\">\n                  <DialogTitle>Edit Link</DialogTitle>\n                </DialogHeader>\n                <ObjectForm\n                  submitLabel=\"Save\"\n                  fields={annotation.schemaType.fields}\n                  defaultValues={annotation.value}\n                  onSubmit={({ value }) => {\n                    annotationPopover.send({\n                      type: \"edit\",\n                      at: annotation.at,\n                      props: value,\n                    })\n                    setDialogOpen(false)\n                  }}\n                />\n              </DialogContent>\n            </Dialog>\n            <ToolbarTooltip tooltipContent=\"Remove link\">\n              <Button\n                variant=\"destructive\"\n                size=\"icon\"\n                onClick={() => {\n                  annotationPopover.send({\n                    type: \"remove\",\n                    schemaType: annotation.schemaType,\n                  })\n                }}\n              >\n                <TrashIcon />\n              </Button>\n            </ToolbarTooltip>\n          </PopoverContent>\n        ))}\n    </Popover>\n  )\n}\n\nexport const ButtonGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) => {\n  return (\n    <div\n      className={cn(\n        \"flex flex-row -space-x-px rounded-md\",\n        \"shadow-xs [&_button]:shadow-none\",\n        \"isolate [&_button]:focus:z-10\",\n        \"[&_button]:rounded-none [&_button]:first:rounded-l-md [&_button]:last:rounded-r-md\",\n        \"[&_button]:border\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport const StyleDropdown = ({\n  schemaTypes,\n  showKeyboardShortcut = false,\n  triggerProps,\n  itemProps,\n}: {\n  schemaTypes: ReadonlyArray<ToolbarStyleSchemaType>\n  showKeyboardShortcut?: boolean\n  triggerProps?: React.ComponentProps<typeof SelectTrigger>\n  itemProps?: Omit<React.ComponentProps<typeof SelectItem>, \"value\">\n}) => {\n  const styleSelector = useStyleSelector({ schemaTypes })\n\n  return (\n    <Select\n      onValueChange={(style) => {\n        if (typeof style === \"string\") {\n          styleSelector.send({ type: \"toggle\", style })\n        }\n      }}\n      value={styleSelector.snapshot.context.activeStyle ?? undefined}\n    >\n      <SelectTrigger\n        {...triggerProps}\n        className={cn(\"bg-background\", triggerProps?.className)}\n      >\n        <SelectValue placeholder=\"Select a style\" />\n      </SelectTrigger>\n      <SelectContent>\n        {schemaTypes.map((style) => {\n          return (\n            <SelectItem key={style.name} value={style.name} {...itemProps}>\n              <div className=\"flex flex-row items-center gap-4\">\n                <div className=\"flex items-center gap-2\">\n                  <ToolbarIcon\n                    icon={style.icon}\n                    fallback={style.title ?? style.name}\n                  />\n                  <span>{style.title}</span>\n                </div>\n                {showKeyboardShortcut && style.shortcut && (\n                  <KeyboardShortcutPreview shortcut={style.shortcut} />\n                )}\n              </div>\n            </SelectItem>\n          )\n        })}\n      </SelectContent>\n    </Select>\n  )\n}\n\nexport const ToolbarButton = ({\n  schemaType,\n  active,\n  showTooltip = true,\n  showKeyboardShortcut = false,\n  ...props\n}: {\n  schemaType:\n    | ToolbarDecoratorSchemaType\n    | ToolbarListSchemaType\n    | ToolbarAnnotationSchemaType\n  active: boolean\n  showTooltip?: boolean\n  showKeyboardShortcut?: boolean\n} & React.ComponentProps<typeof Button>) => {\n  const hasShortcut = \"shortcut\" in schemaType\n\n  const button = (\n    <Button\n      variant={active ? \"default\" : (props.variant ?? \"outline\")}\n      size={props.size ?? \"icon\"}\n      aria-label={!showTooltip ? schemaType.title : undefined}\n      {...props}\n    >\n      <ToolbarIcon\n        icon={schemaType.icon}\n        fallback={schemaType.title ?? schemaType.name}\n      />\n    </Button>\n  )\n\n  if (showTooltip) {\n    return (\n      <ToolbarTooltip\n        tooltipContent={\n          <div className=\"flex space-x-2\">\n            <span>{schemaType.title}</span>\n            {showKeyboardShortcut && hasShortcut && schemaType.shortcut && (\n              <KeyboardShortcutPreview shortcut={schemaType.shortcut} />\n            )}\n          </div>\n        }\n      >\n        {button}\n      </ToolbarTooltip>\n    )\n  }\n\n  return button\n}\n\nexport const DecoratorButton = ({\n  schemaType,\n  showTooltip,\n  showKeyboardShortcut,\n  ...props\n}: {\n  schemaType: ToolbarDecoratorSchemaType\n  showTooltip?: boolean\n  showKeyboardShortcut?: boolean\n} & React.ComponentProps<typeof Button>) => {\n  const decoratorButton = useDecoratorButton({ schemaType })\n  const active =\n    decoratorButton.snapshot.matches({ disabled: \"active\" }) ||\n    decoratorButton.snapshot.matches({ enabled: \"active\" })\n  const disabled = decoratorButton.snapshot.matches(\"disabled\")\n\n  return (\n    <ToolbarButton\n      schemaType={schemaType}\n      showTooltip={showTooltip}\n      showKeyboardShortcut={showKeyboardShortcut}\n      active={active}\n      disabled={disabled}\n      onClick={() => decoratorButton.send({ type: \"toggle\" })}\n      {...props}\n    >\n      <ToolbarIcon\n        icon={schemaType.icon}\n        fallback={schemaType.title ?? schemaType.name}\n      />\n    </ToolbarButton>\n  )\n}\n\nexport const ListButton = ({\n  schemaType,\n  showTooltip = true,\n  ...props\n}: {\n  schemaType: ToolbarListSchemaType\n  showTooltip?: boolean\n} & React.ComponentProps<typeof Button>) => {\n  const listButton = useListButton({ schemaType })\n  const active = listButton.snapshot.matches({ enabled: \"active\" })\n  const disabled = listButton.snapshot.matches(\"disabled\")\n\n  return (\n    <ToolbarButton\n      schemaType={schemaType}\n      showTooltip={showTooltip}\n      active={active}\n      disabled={disabled}\n      onClick={() => {\n        listButton.send({ type: \"toggle\" })\n      }}\n      {...props}\n    >\n      <ToolbarIcon\n        icon={schemaType.icon}\n        fallback={schemaType.title ?? schemaType.name}\n      />\n    </ToolbarButton>\n  )\n}\n\nexport const AnnotationButton = ({\n  schemaType,\n  ...props\n}: {\n  schemaType: ToolbarAnnotationSchemaType\n} & React.ComponentProps<typeof Button>) => {\n  const annotationButton = useAnnotationButton({ schemaType })\n  const disabled = annotationButton.snapshot.matches(\"disabled\")\n\n  if (\n    annotationButton.snapshot.matches({ disabled: \"active\" }) ||\n    annotationButton.snapshot.matches({ enabled: \"active\" })\n  ) {\n    return (\n      <ToolbarButton\n        schemaType={schemaType}\n        active={true}\n        disabled={disabled}\n        showKeyboardShortcut={true}\n        onClick={() => annotationButton.send({ type: \"remove\" })}\n        {...props}\n      >\n        <ToolbarIcon\n          icon={schemaType.icon}\n          fallback={schemaType.title ?? schemaType.name}\n        />\n      </ToolbarButton>\n    )\n  }\n\n  return (\n    <Dialog\n      open={annotationButton.snapshot.matches({\n        enabled: { inactive: \"showing dialog\" },\n      })}\n      onOpenChange={(open) => {\n        if (!open) {\n          annotationButton.send({ type: \"close dialog\" })\n        }\n      }}\n    >\n      <ToolbarButton\n        schemaType={schemaType}\n        active={false}\n        disabled={disabled}\n        showKeyboardShortcut={true}\n        onClick={() => annotationButton.send({ type: \"open dialog\" })}\n        {...props}\n      >\n        <ToolbarIcon\n          icon={schemaType.icon}\n          fallback={schemaType.title ?? schemaType.name}\n        />\n      </ToolbarButton>\n      <DialogContent>\n        <DialogHeader className=\"pb-4\">\n          <DialogTitle>Create a Link</DialogTitle>\n        </DialogHeader>\n        <ObjectForm\n          submitLabel=\"Add\"\n          fields={schemaType.fields}\n          defaultValues={schemaType.defaultValues}\n          onSubmit={({ value }) => {\n            annotationButton.send({ type: \"add\", annotation: { value } })\n            annotationButton.send({ type: \"close dialog\" })\n          }}\n        />\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nexport const ObjectForm = (\n  props: Pick<ToolbarBlockObjectSchemaType, \"fields\" | \"defaultValues\"> & {\n    submitLabel: string\n    onSubmit: ({ value }: { value: { [key: string]: unknown } }) => void\n  }\n) => {\n  return (\n    <form\n      className=\"flex flex-col gap-4\"\n      onSubmit={(e) => {\n        e.preventDefault()\n\n        const formData = new FormData(e.target as HTMLFormElement)\n        const formDataValues = Object.fromEntries(formData)\n        const value = FormDataSchema.parse(formDataValues)\n\n        props.onSubmit({\n          value,\n        })\n      }}\n    >\n      {props.fields.map((field, index) => {\n        const defaultValue = props.defaultValues?.[field.name]\n\n        return (\n          <div key={field.name} className=\"grid w-full items-center gap-3\">\n            <Label htmlFor={field.name}>{field.title ?? field.name}</Label>\n            <Input\n              type={field.type}\n              name={field.name}\n              id={field.name}\n              autoFocus={index === 0}\n              defaultValue={\n                typeof defaultValue === \"string\" ||\n                typeof defaultValue === \"number\"\n                  ? defaultValue\n                  : undefined\n              }\n            />\n          </div>\n        )\n      })}\n      <Button className=\"self-end\" type=\"submit\" size=\"sm\">\n        {props.submitLabel}\n      </Button>\n    </form>\n  )\n}\n\nexport const HistoryButton = ({\n  direction,\n  showTooltip = true,\n  showKeyboardShortcut = false,\n  ...props\n}: {\n  direction: \"undo\" | \"redo\"\n  showTooltip?: boolean\n  showKeyboardShortcut?: boolean\n} & React.ComponentProps<typeof Button>) => {\n  const historyButtons = useHistoryButtons()\n  const disabled = historyButtons.snapshot.matches(\"disabled\")\n\n  const extendedSchema: Record<\n    typeof direction,\n    { icon: React.ElementType; shortcut: KeyboardShortcut; title: string }\n  > = {\n    undo: {\n      icon: UndoIcon,\n      shortcut: undo,\n      title: \"Undo\",\n    },\n    redo: {\n      icon: RedoIcon,\n      shortcut: redo,\n      title: \"Redo\",\n    },\n  }\n\n  const button = (\n    <Button\n      variant={props.variant ?? \"outline\"}\n      size={props.size ?? \"icon\"}\n      aria-label={!showTooltip ? direction : undefined}\n      disabled={disabled}\n      onClick={() => historyButtons.send({ type: `history.${direction}` })}\n      {...props}\n    >\n      <ToolbarIcon\n        icon={extendedSchema[direction].icon}\n        fallback={extendedSchema[direction].title}\n      />\n    </Button>\n  )\n\n  if (showTooltip) {\n    return (\n      <ToolbarTooltip\n        tooltipContent={\n          <div className=\"flex space-x-2\">\n            <span>{extendedSchema[direction].title}</span>\n            {showKeyboardShortcut && (\n              <KeyboardShortcutPreview\n                shortcut={extendedSchema[direction].shortcut}\n              />\n            )}\n          </div>\n        }\n      >\n        {button}\n      </ToolbarTooltip>\n    )\n  }\n\n  return button\n}\n\nexport const KeyboardShortcutPreview = ({\n  shortcut,\n}: {\n  shortcut: KeyboardShortcut\n}) => {\n  const keyToIcon = {\n    shift: ArrowBigUpIcon,\n    ctrl: ChevronUpIcon,\n    option: OptionIcon,\n  }\n\n  const KeyboardKey = ({ keyboardKey }: { keyboardKey: string }) => {\n    const IconComponent =\n      keyToIcon[keyboardKey.toLowerCase() as keyof typeof keyToIcon]\n\n    return (\n      <kbd className=\"flex h-4 min-w-4 items-center justify-center rounded-xs bg-muted text-xs text-muted-foreground\">\n        {IconComponent ? <IconComponent className=\"size-3\" /> : keyboardKey}\n      </kbd>\n    )\n  }\n\n  return (\n    <div className=\"z-10 flex items-center space-x-1\">\n      {shortcut.keys.map((keyboardKey) => (\n        <kbd\n          key={keyboardKey}\n          className=\"flex h-4 min-w-4 items-center justify-center rounded-xs bg-muted text-xs text-muted-foreground\"\n        >\n          {keyboardKey.toLowerCase() in keyToIcon ? (\n            <KeyboardKey keyboardKey={keyboardKey} />\n          ) : (\n            keyboardKey\n          )}\n        </kbd>\n      ))}\n    </div>\n  )\n}\n\nexport const ToolbarTooltip = ({\n  children,\n  tooltipContent,\n}: {\n  children: React.ReactNode\n  tooltipContent: React.ReactNode\n}) => {\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{children}</TooltipTrigger>\n      <TooltipContent>{tooltipContent}</TooltipContent>\n    </Tooltip>\n  )\n}\n\nexport const ToolbarIcon = ({\n  icon,\n  fallback,\n}: {\n  icon?: React.ReactNode | React.ComponentType\n  fallback: string | null\n}) => {\n  const IconComponent = icon\n\n  return React.isValidElement(IconComponent) ? (\n    IconComponent\n  ) : isValidElementType(IconComponent) ? (\n    <IconComponent />\n  ) : (\n    fallback\n  )\n}\n\nexport const Toolbar = ({\n  className,\n  children,\n}: {\n  className?: string\n  children?: React.ReactNode\n}) => {\n  return (\n    <TooltipProvider>\n      <div\n        className={cn(\n          \"flex flex-wrap gap-1.5 rounded-t-sm border-b bg-muted px-2.5 py-1.5 md:justify-center\",\n          className\n        )}\n      >\n        {children}\n      </div>\n    </TooltipProvider>\n  )\n}\n\nexport const EditorTextEditable = ({\n  className,\n  ...props\n}: {\n  className?: string\n} & React.ComponentProps<typeof PortableTextEditable>) => {\n  return (\n    <PortableTextEditable\n      className={cn(\n        \"h-[30rem] w-full p-2 focus-visible:outline-none\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport const EditorContainer = ({\n  className,\n  ...props\n}: {\n  className?: string\n} & React.ComponentProps<\"div\">) => {\n  return (\n    <div\n      className={cn(\n        \"flex w-full max-w-5xl flex-col rounded-md border border-border shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport const EditorProvider = (props: EditorProviderProps) => {\n  return <PortableTextEditorProvider {...props} />\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/components/ui/button.tsx",
      "content": "import { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/components/ui/dialog.tsx",
      "content": "\"use client\"\n\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { XIcon } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />\n}\n\nfunction DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />\n}\n\nfunction DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />\n}\n\nfunction DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />\n}\n\nfunction DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        \"fixed inset-0 z-50 bg-black/50 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:animate-in data-[state=open]:fade-in-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogContent({\n  className,\n  children,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content> & {\n  showCloseButton?: boolean\n}) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          \"fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border bg-background p-6 shadow-lg duration-200 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[state=open]:animate-in data-[state=open]:fade-in-0 data-[state=open]:zoom-in-95 sm:max-w-lg\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        {showCloseButton && (\n          <DialogPrimitive.Close\n            data-slot=\"dialog-close\"\n            className=\"absolute top-4 right-4 rounded-xs opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:ring-2 focus:ring-ring focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\"\n          >\n            <XIcon />\n            <span className=\"sr-only\">Close</span>\n          </DialogPrimitive.Close>\n        )}\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n}\n\nfunction DialogHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn(\"text-lg leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/components/ui/input.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"flex h-9 w-full min-w-0 rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none selection:bg-primary selection:text-primary-foreground file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm dark:bg-input/30\",\n        \"focus-visible:border-ring focus-visible:ring-[3px] focus-visible:ring-ring/50\",\n        \"aria-invalid:border-destructive aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/components/ui/label.tsx",
      "content": "\"use client\"\n\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/components/ui/popover.tsx",
      "content": "\"use client\"\n\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Popover({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Root>) {\n  return <PopoverPrimitive.Root data-slot=\"popover\" {...props} />\n}\n\nfunction PopoverTrigger({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {\n  return <PopoverPrimitive.Trigger data-slot=\"popover-trigger\" {...props} />\n}\n\nfunction PopoverContent({\n  className,\n  align = \"center\",\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Content>) {\n  return (\n    <PopoverPrimitive.Portal>\n      <PopoverPrimitive.Content\n        data-slot=\"popover-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-hidden data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[state=open]:animate-in data-[state=open]:fade-in-0 data-[state=open]:zoom-in-95\",\n          className\n        )}\n        {...props}\n      />\n    </PopoverPrimitive.Portal>\n  )\n}\n\nfunction PopoverAnchor({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {\n  return <PopoverPrimitive.Anchor data-slot=\"popover-anchor\" {...props} />\n}\n\nexport { Popover, PopoverAnchor, PopoverContent, PopoverTrigger }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/components/ui/select.tsx",
      "content": "\"use client\"\n\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Select({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />\n}\n\nfunction SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />\n}\n\nfunction SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />\n}\n\nfunction SelectTrigger({\n  className,\n  size = \"default\",\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\n  size?: \"sm\" | \"default\"\n}) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      data-size={size}\n      className={cn(\n        \"flex w-fit items-center justify-between gap-2 rounded-md border border-input bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:border-ring focus-visible:ring-[3px] focus-visible:ring-ring/50 disabled:cursor-not-allowed disabled:opacity-50 aria-invalid:border-destructive aria-invalid:ring-destructive/20 data-[placeholder]:text-muted-foreground data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 dark:bg-input/30 dark:hover:bg-input/50 dark:aria-invalid:ring-destructive/40 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 [&_svg:not([class*='text-'])]:text-muted-foreground\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  )\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = \"popper\",\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          \"relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border bg-popover text-popover-foreground shadow-md data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[state=open]:animate-in data-[state=open]:fade-in-0 data-[state=open]:zoom-in-95\",\n          position === \"popper\" &&\n            \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n          className\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            \"p-1\",\n            position === \"popper\" &&\n              \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1\"\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  )\n}\n\nfunction SelectLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn(\"px-2 py-1.5 text-xs text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 [&_svg:not([class*='text-'])]:text-muted-foreground *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  )\n}\n\nfunction SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn(\"pointer-events-none -mx-1 my-1 h-px bg-border\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  )\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  )\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/components/ui/tooltip.tsx",
      "content": "\"use client\"\n\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction TooltipProvider({\n  delayDuration = 0,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n  return (\n    <TooltipPrimitive.Provider\n      data-slot=\"tooltip-provider\"\n      delayDuration={delayDuration}\n      {...props}\n    />\n  )\n}\n\nfunction Tooltip({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />\n    </TooltipProvider>\n  )\n}\n\nfunction TooltipTrigger({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />\n}\n\nfunction TooltipContent({\n  className,\n  sideOffset = 0,\n  children,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Content>) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        data-slot=\"tooltip-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 w-fit origin-(--radix-tooltip-content-transform-origin) animate-in rounded-md bg-primary px-3 py-1.5 text-xs text-balance text-primary-foreground fade-in-0 zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <TooltipPrimitive.Arrow className=\"z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px] bg-primary fill-primary\" />\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  )\n}\n\nexport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}